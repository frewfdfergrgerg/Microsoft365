import datetime
import configparser
import random
import asyncio

from telethon.sync import TelegramClient
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.errors import (
    ChatAdminRequiredError,
    UserAlreadyParticipantError,
    FloodWaitError,
    UserIsBlockedError,
    ChannelPrivateError
)
from telethon import events


# –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API Telethon
api_id = 20559113
api_hash = 'ed8e97b3a73a324f5cf0b6dae63239b2'

# –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —á–∞—Ç–æ–≤
chat_list_path = 'chat_list.txt'

# –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
message_path = 'message.txt'

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
reply_message_path = 'reply_message.txt'

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
interval_path = 'interval.txt'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
async def join_chat(client, chat_name):
    try:
        await client(JoinChannelRequest(chat_name))
        print_with_time('üåê –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É:', chat_name)
    except ChatAdminRequiredError:
        pass
    except UserAlreadyParticipantError:
        print_with_time('–í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞:', chat_name)
    except FloodWaitError as e:
        print_with_time(f'‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥')
        await asyncio.sleep(e.seconds)
        await join_chat(client, chat_name)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
    except UserIsBlockedError:
        print_with_time('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ:', chat_name)
    except ChannelPrivateError:
        print_with_time('‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É:', chat_name)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async def send_message_without_preview(event):
    try:
        with open(reply_message_path, 'r', encoding='utf-8') as file:
            message = file.read()
        await event.respond(message, link_preview=False)
        print_with_time('üöπ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
        return True
    except Exception as e:
        if 'You can\'t write in this chat' not in str(e):
            print_with_time('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', e)
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
def get_message_interval():
    with open(interval_path, 'r') as file:
        min_interval, max_interval = map(int, file.read().strip().split())
    return random.randint(min_interval, max_interval)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç—ã
async def send_messages(client):
    # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    with open(message_path, 'r', encoding='utf-8') as file:
        message = file.read()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —á–∞—Ç–æ–≤
    with open(chat_list_path, 'r') as file:
        # –ß–∏—Ç–∞–µ–º –∏–º–µ–Ω–∞ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        chat_names = file.read().splitlines()

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
        for name in chat_names:
            await join_chat(client, name if name.startswith('@') else f'@{name}')

    successful_messages = 0
    total_messages = len(chat_names)

    # –¶–∏–∫–ª–∏—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    while True:
        for chat_name in chat_names:
            try:
                await client.send_message(chat_name, message)
                print_with_time('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç:', chat_name)
                successful_messages += 1
            except ChatAdminRequiredError:
                pass
            except UserAlreadyParticipantError:
                print_with_time('–í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞:', chat_name)
            except FloodWaitError as e:
                print_with_time('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ', e.seconds, '—Å–µ–∫—É–Ω–¥')
                await asyncio.sleep(e.seconds)
                continue
            except UserIsBlockedError:
                print_with_time('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ:', chat_name)
            except ChannelPrivateError:
                print_with_time('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', chat_name)
            except Exception as e:
                if 'You can\'t write in this chat' not in str(e):
                    print_with_time('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç:', chat_name)
                    print(e)

        interval = get_message_interval()
        print_with_time(f'‚ôªÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_messages} —Å–æ–æ–±—â–µ–Ω–∏–π ‚ôªÔ∏è')
        print_with_time('üïí –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑', interval, '—Å–µ–∫—É–Ω–¥')
        await asyncio.sleep(interval)


# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient('telethon', api_id, api_hash)


# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram
async def run_client():
    async with client:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        await client(UpdateProfileRequest(first_name='–°–ú–û–¢–†–ò', last_name='–ü–†–û–§–ò–õ–¨'))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        await client(UpdateProfileRequest(about='–ë–æ—Ç üëâ t.me/snapnudify_bot t.me/snapnudify_bot'))

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        @client.on(events.NewMessage)
        async def handler(event):
            if event.is_private:
                await send_message_without_preview(event)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        await send_messages(client)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
def print_with_time(message, *args):
    current_time = datetime.datetime.now().strftime("%H:%M")
    print(f"[{current_time}] {message}", *args)


# –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
loop = asyncio.get_event_loop()
loop.run_until_complete(run_client())