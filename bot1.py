from telebot import types
from yoomoney import Quickpay, Client
import telebot
import time
import requests
import yaml
import threading
import csv
import uuid
import secrets
import telebot
import os
import subprocess
from PIL import Image, ImageOps
from io import BytesIO
import os, subprocess, time, glob
import webuiapi
import re
from PIL import ImageFilter
import queue
from queue import Queue
import asyncio
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
api = webuiapi.WebUIApi(host='127.0.0.1',
                        port=7860,
                        sampler='DPM++ SDE',
                        steps=40)
                        
amounts = {}
with open('amounts.txt', encoding='utf-8') as f:
  for line in f:
    line = line.strip()
    btn, name, price_name, price = line.split(';')
    amounts[btn] = {'name': name, 'price_name': price_name, 'price': int(price)}

def read_token(filename):
    with open(filename, 'r') as file:
        return file.read().strip()
        
token_bot = read_token('token.txt')
ADMIN_ID = 6697285192
access_token = '4100110982154501.870D6D03180DF717261ABD00E6C3F4DE4965FAF8158A32959F3EC1E29716A5F024F2CF0C746EFF4C0EFABC00D4663F8BD51A52C59EBCAA2CFCFD716856EB228CDAD786AEC88FDAB2C459993303F4A8309490CAC1B224B3B8CA4D113F4D4773F05D2415E3DD5DC220495AF0DD4BC0B3D3FB93512DAE2BC64B9B3B9DBD12F92768'
your_receiver = '4100110982154501'
tariff_selection_in_progress = False
bot = telebot.TeleBot(token_bot)
bot.delete_webhook()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ÆMoney
token = access_token
client = Client(token)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open('data.yml', 'r') as file:
        users_processing = yaml.safe_load(file)
        if users_processing is None:
            users_processing = {}
except FileNotFoundError:
    users_processing = {}



# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
def create_payment_link(user_id, amount, label):
    receiver = your_receiver  # –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    targets = "Sponsor this project"
    payment_type = "SB"

    quickpay = Quickpay(receiver=receiver, quickpay_form="shop", targets=targets,
                        paymentType=payment_type, sum=amount, label=label)

    return quickpay.redirected_url

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
def check_payment_status(token, label):
    client = Client(token)
    while True:
        history = client.operation_history(label=label)
        for operation in history.operations:
            if operation.status == 'success':
                return True
        time.sleep(5)  # –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
def send_payment_success_message(chat_id, count_processing):
    message_text = f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–π.\nüí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞: <code>{count_processing}</code> –æ–±—Ä–∞–±–æ—Ç–æ–∫\n\nüè† –£ –≤–∞—Å: <code>{users_processing[chat_id]['count_processing']}</code> –æ–±—Ä–∞–±–æ—Ç–æ–∫"
    bot.send_message(chat_id, text=message_text, parse_mode='HTML')
    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
    if count_processing == 5:
        count_processing -= 5
    elif count_processing == 1:
        count_processing -= 1
    elif count_processing == 10:
        count_processing -= 10
    elif count_processing == 50:
        count_processing -= 50

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–æ–∫ –≤ —Ñ–∞–π–ª
    if chat_id in users_processing:
        users_processing[chat_id]['count_processing'] += count_processing
    else:
        users_processing[chat_id] = {'user_name': bot.get_chat(chat_id).username, 'count_processing': count_processing}

    with open('data.yml', 'w') as file:
        yaml.safe_dump(users_processing, file)


    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_chat_id = ADMIN_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} (@{users_processing[chat_id]['user_name']}) —Å–æ–≤–µ—Ä—à–∏–ª —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: {users_processing[chat_id]['count_processing']}"
    bot.send_message(admin_chat_id, admin_message_text)

    update_data_yml()


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª data.yml
def save_user_data(data):
    with open('data.yml', 'w') as file:
        yaml.safe_dump(data, file)

@bot.message_handler(commands=['give'])
def give_processing(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == ADMIN_ID:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (user_id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫)
        command_args = message.text.split()
        if len(command_args) == 3:
            user_id = int(command_args[1])
            processing_count = int(command_args[2])

            if user_id in users_processing:
                users_processing[user_id]['count_processing'] += processing_count  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                users_processing[user_id] = {
                    'user_name': bot.get_chat(user_id).username,
                    'count_processing': 0,
                    'free': 0,
                    'ref': 0,
                    'ref1': 0
                }
            update_data_yml()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ data.yml

            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–æ–∫
                user_message = f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ <b>{processing_count}</b> –æ–±—Ä–∞–±–æ—Ç–æ–∫.\nüè† –£ –≤–∞—Å: <b>{users_processing[user_id]['count_processing']}</b> –æ–±—Ä–∞–±–æ—Ç–æ–∫"
                bot.send_message(chat_id=user_id, text=user_message, parse_mode='HTML')
                admin_message = f"‚úÖ ID {user_id} –≤—ã–¥–∞–Ω–æ {processing_count} –æ–±—Ä–∞–±–æ—Ç–æ–∫. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: {users_processing[user_id]['count_processing']}"
                bot.reply_to(message, admin_message)
            except Exception as e:
                admin_message = f"(–Ω–µ –∑–∞—Ä–µ–≥–∞–Ω) ‚úÖ  ID {user_id} –≤—ã–¥–∞–Ω–æ {processing_count} –æ–±—Ä–∞–±–æ—Ç–æ–∫. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: {users_processing[user_id]['count_processing']}"
                bot.reply_to(message, admin_message)
        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /give <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@bot.message_handler(content_types=['photo'], func=lambda message: message.from_user.id == ADMIN_ID)
def handle_admin_photo(message):
    send_message_with_attachment(message)

task_queue = queue.Queue()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def process_photo(admin_id, unique_code, message, photo_result, user_id, file_id, message_id, user_name, wait_mes_id, caption, count_processing, free_processing, users_processing, ADMIN_ID):
    try:
        keyboard_admin = types.InlineKeyboardMarkup()
        refuse_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_photo_1')
        keyboard_admin.add(refuse_button)

        keyboard_user = types.InlineKeyboardMarkup()
        buy_button = types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏', callback_data='buy_processing2')
        keyboard_user.add(buy_button)
      
        message_text2 = f"‚åõ <b>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ...</b>"
        bot.edit_message_text(chat_id=user_id, message_id=wait_mes_id, text=message_text2, parse_mode='HTML')

        lib_command = [
            "python3",
            "/content/detecthuman/simple_extractor.py",
            "--dataset", "lip",
            "--model-restore", "lib/lib.pth",
            "--input-dir", "images",
            "--output-dir", "lib_results"
        ]
        subprocess.run(lib_command)
        
        lib_results_folder = 'lib_results/'
        file_list = os.listdir(lib_results_folder)
        lib_mask_path = 'lib_results/' + file_id + '.png'
        lib_mask = Image.open(lib_mask_path).convert("L")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω–ø–µ–π–Ω—Ç–∏–Ω–≥
        result2_path = 'images/' + file_id + '.jpg'
        mask = Image.open(lib_mask_path)
        result2 = Image.open(result2_path)

        message_text4 = f"‚åõ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ...</b>"
        bot.edit_message_text(chat_id=user_id, message_id=wait_mes_id, text=message_text4, parse_mode='HTML')

        inpainting_result = api.img2img(images=[result2],
                                        mask_image=mask,
                                        inpainting_fill=10,
                                        cfg_scale=2.0,
                                        prompt="naked woman without clothes, naked breasts, naked vagina, excessive detail, (skin pores: 1.1), (skin with high detail: 1.2), (skin shots: 0.9), film grain, soft lighting, high quality",
                                        negative_prompt="(deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, (mutated hands and fingers:1.4), disconnected limbs, mutation, mutated, ugly, disgusting, blurry, amputation",
                                        denoising_strength=0.9)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with BytesIO() as buf:
            if photo_result == "not_censorship":
                final_result = inpainting_result.image
                caption = f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
                final_result.save(buf, format='PNG')
                buf.seek(0)
                bot.delete_message(chat_id=user_id, message_id=wait_mes_id)
                bot.send_photo(message.chat.id, photo=buf, caption=caption, parse_mode='HTML')

            else:
                blurred_result = inpainting_result.image.filter(ImageFilter.GaussianBlur(radius=10))
                final_result = blurred_result
                caption = f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\nüí≥ –ö—É–ø–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã üëá"
                final_result.save(buf, format='PNG')
                buf.seek(0)
                bot.delete_message(chat_id=user_id, message_id=wait_mes_id)
                bot.send_photo(message.chat.id, photo=buf, caption=caption, parse_mode='HTML', reply_markup=keyboard_user)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        with BytesIO() as buf_admin:
            final_result.save(buf_admin, format='PNG')
            buf_admin.seek(0)
            caption_admin = f"ID: <code>{user_id}</code>\n–ù–∏–∫: @{user_name}\n–ó–∞–∫–∞–∑: <code>{unique_code}</code>\n–û–±—Ä–∞–±–æ—Ç–æ–∫: <code>{users_processing[user_id]['count_processing']}</code>\n‚ôªÔ∏è–†–µ–∑—É–ª—å—Ç–∞—Ç‚ôªÔ∏è"
            bot.send_photo(admin_id, photo=buf_admin, caption=caption_admin, parse_mode='HTML', reply_markup=keyboard_admin)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        os.remove(src)
        # –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ —Å–ø–∏—Å–∫—É –∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        for file_name in file_list:
            file_path = os.path.join(lib_results_folder, file_name)
            if os.path.isfile(file_path):
                os.remove(file_path)
                
    except Exception as e:
        print("An error occurred:", str(e))
        if photo_result == "not_censorship":
            bot.delete_message(chat_id=user_id, message_id=wait_mes_id)
            users_processing[user_id]['count_processing'] += 1
            bot.send_message(chat_id=user_id, text='‚ùå –û—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.', reply_to_message_id=message_id) 
        if photo_result == "censorship":
            bot.delete_message(chat_id=user_id, message_id=wait_mes_id)
            users_processing[user_id]['free'] += 1
            bot.send_message(chat_id=user_id, text='‚ùå –û—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.', reply_to_message_id=message_id)
                  
        with open('data.yml', 'w') as file:
            yaml.safe_dump(users_processing, file)
                    



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
def process_queue():
    while True:
        admin_id, unique_code, message, photo_result, user_id, file_id, message_id, user_name, wait_mes_id, caption, count_processing, free_processing, users_processing, ADMIN_ID = task_queue.get()
        process_photo(admin_id, unique_code, message, photo_result, user_id, file_id, message_id, user_name, wait_mes_id, caption, count_processing, free_processing, users_processing, ADMIN_ID)
        task_queue.task_done()

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
queue_thread = threading.Thread(target=process_queue)
queue_thread.start()

 
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
@bot.message_handler(content_types=['photo'], func=lambda message: message.from_user.id != ADMIN_ID)
def handle_user_photo(message):
    user_id = message.from_user.id
    user_name = message.from_user.username

    if user_id in users_processing:
        count_processing = users_processing[user_id]['count_processing']
        free_processing = users_processing[user_id]['free']

        if count_processing > 0 or free_processing == 1:
            admin_id = ADMIN_ID
            message_id = message.message_id 
            text = message.caption
            file_id = message.photo[-1].file_id
            file_path = bot.get_file(file_id).file_path
            downloaded_file = bot.download_file(file_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            src = 'images/' + file_id + '.jpg'
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)

            unique_code = f"{secrets.token_hex(5)}"
            caption = f"ID: <code>{user_id}</code>\n–ù–∏–∫: @{user_name}\n–û–±—Ä–∞–±–æ—Ç–æ–∫: <code>{users_processing[user_id]['count_processing']}</code>"

            keyboard_user = types.InlineKeyboardMarkup()
            buy_button = types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏', callback_data='buy_processing2')
            keyboard_user.add(buy_button)
            keyboard_admin = types.InlineKeyboardMarkup()
            refuse_button = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancel_photo')
            keyboard_admin.add(refuse_button)
            if count_processing > 0:
                # –ó–∞–º—ã–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                photo_result = "not_censorship"
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                users_processing[user_id]['free'] = 0
                users_processing[user_id]['count_processing'] -= 1   
                update_data_yml()
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –∑–∞–º—ã–ª–µ–Ω–∏—è                  
                photo_result = "censorship"
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                users_processing[user_id]['free'] = 0
                update_data_yml()             

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_photo(admin_id, message.photo[-1].file_id, caption=caption, parse_mode='HTML', reply_markup=keyboard_admin)
            admin_message_id = message.message_id
            message_text1 = f"‚åõ <b>–í—ã –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–π—Ç–µ...</b>\n\n~–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–¥–∏–∂–∞–¥–Ω–∏–µ: <b>15 —Å–µ–∫—É–Ω–¥</b>"
            wait_mes = bot.send_message(chat_id=user_id, text=message_text1, parse_mode='HTML', reply_to_message_id=message_id)
            wait_mes_id = wait_mes.message_id

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            task_queue.put((admin_id, unique_code, message, photo_result, user_id, file_id, message_id, user_name, wait_mes_id, caption, count_processing, free_processing, users_processing, ADMIN_ID))

        else:
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏', callback_data='buy_processing1')
            keyboard.add(button)
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫. –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=keyboard, parse_mode='HTML')

    else:
        bot.send_message(message.chat.id, "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ - /start")
        

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_photo_1')
def cancel_photo_1(call):

  user_id = call.message.caption.split('\n')[0].split(': ')[-1].strip()
  items = call.message.caption.split()
  photo_id = call.message.photo[-1].file_id
  bot.send_photo(user_id, photo_id, caption="‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–∞. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.")
  deduct_processing(int(items[1]))
  refusal_caption = "‚ùå –§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
  bot.edit_message_caption(chat_id=call.message.chat.id,
                           message_id=call.message.message_id,
                           caption=call.message.caption + "\n" + refusal_caption)
  
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_photo')
def cancel_photo(call):

  user_id = call.message.caption.split('\n')[0].split(': ')[-1].strip()
  items = call.message.caption.split()
  photo_id = call.message.photo[-1].file_id
  bot.send_photo(user_id, photo_id, caption="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
  deduct_processing(int(items[1]))
  refusal_caption = "‚ùå –§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
  bot.edit_message_caption(chat_id=call.message.chat.id,
                           message_id=call.message.message_id,
                           caption=call.message.caption + "\n" + refusal_caption)


@bot.callback_query_handler(func=lambda call: call.data == 'buy_processing2')
def buy_processing_callback(call):
    user_id = call.from_user.id
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
    if user_id not in users_processing:
        users_processing[user_id] = {
            'user_name': bot.get_chat(user_id).username,
            'count_processing': 0,
            'free': 0,
            'ref': 0,
            'ref1': 0
        }


    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(amounts['button1']['name'], callback_data='tariff_1')
    button2 = types.InlineKeyboardButton(f"{amounts['button1']['price_name']}", callback_data='tariff_1')
    button3 = types.InlineKeyboardButton(amounts['button2']['name'], callback_data='tariff_2')
    button4 = types.InlineKeyboardButton(f"{amounts['button2']['price_name']}", callback_data='tariff_2')
    button5 = types.InlineKeyboardButton(amounts['button3']['name'], callback_data='tariff_3')
    button6 = types.InlineKeyboardButton(f"{amounts['button3']['price_name']}", callback_data='tariff_3')
    button7 = types.InlineKeyboardButton(amounts['button4']['name'], callback_data='tariff_4')
    button8 = types.InlineKeyboardButton(f"{amounts['button4']['price_name']}", callback_data='tariff_4')
    keyboard.add(button1, button2)
    keyboard.add(button3, button4)
    keyboard.add(button5, button6)
    keyboard.add(button7, button8)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∏ –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞
    count_processing = users_processing[user_id]['count_processing']
    message_text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: {count_processing}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>"
    bot.send_message(call.message.chat.id, text=message_text, reply_markup=keyboard, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'buy_processing1')
def buy_processing_callback(call):
    user_id = call.from_user.id
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
    if user_id not in users_processing:
        users_processing[user_id] = {
            'user_name': bot.get_chat(user_id).username,
            'count_processing': 0,
            'free': 0,
            'ref': 0,
            'ref1': 0
        }

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫. –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(amounts['button1']['name'], callback_data='tariff_1')
    button2 = types.InlineKeyboardButton(f"{amounts['button1']['price_name']}", callback_data='tariff_1')
    button3 = types.InlineKeyboardButton(amounts['button2']['name'], callback_data='tariff_2')
    button4 = types.InlineKeyboardButton(f"{amounts['button2']['price_name']}", callback_data='tariff_2')
    button5 = types.InlineKeyboardButton(amounts['button3']['name'], callback_data='tariff_3')
    button6 = types.InlineKeyboardButton(f"{amounts['button3']['price_name']}", callback_data='tariff_3')
    button7 = types.InlineKeyboardButton(amounts['button4']['name'], callback_data='tariff_4')
    button8 = types.InlineKeyboardButton(f"{amounts['button4']['price_name']}", callback_data='tariff_4')
    keyboard.add(button1, button2)
    keyboard.add(button3, button4)
    keyboard.add(button5, button6)
    keyboard.add(button7, button8)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∏ –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞
    count_processing = users_processing[user_id]['count_processing']
    message_text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: {count_processing}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>"
    bot.send_message(call.message.chat.id, text=message_text, reply_markup=keyboard, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ data.yml
def update_data_yml():
    with open('data.yml', 'w') as file:
        yaml.safe_dump(users_processing, file)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
def send_message_with_attachment(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == ADMIN_ID:
        photo = message.photo[0].file_id
        caption = message.caption

        if caption:
            items = caption.split()
            if items[0] == '/photo':
                text = ' '.join(items[2:])
                bot.send_photo(int(items[1]), photo, caption=text)
            elif items[0] == '/true':
                true_text = "‚úÖ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
                bot.send_photo(int(items[1]), photo, caption=true_text)
            elif items[0] == '/false':
                false_text = "‚ùå –í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
                bot.send_photo(int(items[1]), photo, caption=false_text)
                deduct_processing(int(items[1]))  # –í—ã—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            else:
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        else:
            bot.reply_to(message, "–ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")



# –§—É–Ω–∫—Ü–∏—è –≤—ã—á–µ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def deduct_processing(user_id):
    if user_id in users_processing:
       users_processing[user_id]['count_processing'] += 1
       with open('data.yml', 'w') as file:
           yaml.safe_dump(users_processing, file)
    else:
       bot.send_message(user_id, "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ - /start")



@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    if user_id not in users_processing:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–º–∞–Ω–¥–µ
        if message.text.startswith('/start'):
            start_param = message.text.split(' ')[1] if len(message.text.split(' ')) > 1 else None
        
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            if start_param and start_param.isdigit():
                referred_by = int(start_param)
                
        agreement_text = (
            'üîû –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –í–∞–º —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç.\n\n'
            '‚úÖ –ö–Ω–æ–ø–∫–∞ "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º.\n\n'
            'https://telegra.ph/Polzovatelskoe-soglashenie-SnapNudify-08-29'
        )
        agreement_button = types.InlineKeyboardButton('‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data=f'agreed {referred_by}')
        agreement_keyboard = types.InlineKeyboardMarkup().add(agreement_button)

        bot.send_message(user_id, agreement_text, reply_markup=agreement_keyboard, parse_mode='Markdown', disable_web_page_preview=True)
    else:
        send_main_keyboard(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
@bot.message_handler(func=lambda message: message.text == 'üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
def referral_system(message):
    user_id = message.from_user.id
    user_referrals = users_processing.get(user_id, {}).get('ref', 0)
    referrals_until_free = 5 - users_processing.get(user_id, {}).get('ref1', 0)

    referral_message = (
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: <b>{user_referrals}</b>\n"
        f"‚ôªÔ∏è –î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—â–µ –Ω—É–∂–Ω–æ <b>{referrals_until_free}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b> \n<code>https://t.me/{bot.get_me().username}?start={user_id}</code>\n\n"
        f"ü§ù <b>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞ –∫–∞–∂–¥—ã—Ö 5 –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.</b>", 
    )

    bot.send_message(user_id, referral_message, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('agreed'))
def agreed_callback(call):
    user_id = call.from_user.id
    if user_id not in users_processing:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
        users_processing[user_id] = {
            'user_name': bot.get_chat(user_id).username,
            'count_processing': 0,
            'free': 1,
            'ref': 0,
            'ref1': 0
        }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
        referred_by = int(call.data.split(' ')[1])

        if referred_by in users_processing:
            users_processing[referred_by]['ref'] += 1
            users_processing[referred_by]['ref1'] += 1
            referrals_until_free = 5 - users_processing[referred_by]['ref1']
            with open('data.yml', 'w') as file:
                yaml.safe_dump(users_processing, file)
            bot.send_message(referred_by, parse_mode='HTML', text=f"üë§ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n\nüè† –£ –≤–∞—Å <b>{users_processing[referred_by]['ref']}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n‚ôªÔ∏è –î–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ <b>{referrals_until_free}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
            if users_processing[referred_by]['ref1'] == 5:
                users_processing[referred_by]['ref1'] = 0
                users_processing[referred_by]['count_processing'] += 1
                bot.send_message(referred_by, parse_mode='HTML', text=f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ <b>1</b> –æ–±—Ä–∞–±–æ—Ç–∫–∞.\nüè† –£ –≤–∞—Å: <b>{users_processing[referred_by]['count_processing']}</b> –æ–±—Ä–∞–±–æ—Ç–æ–∫")

                save_data()

    with open('data.yml', 'a') as file:
        file.write(f'\n- user_id: {user_id}\n user_name: {users_processing[user_id]["user_name"]}\n count_processing: {users_processing[user_id]["count_processing"]}\n free: {users_processing[user_id]["free"]}\n ref: {users_processing[user_id]["ref"]}\n ref1: {users_processing[user_id]["ref1"]}')

    send_main_keyboard(user_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    save_data()
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_keyboard(user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('üîû –†–∞–∑–¥–µ—Ç—å –¥–µ–≤—É—à–∫—É')
    button2 = types.KeyboardButton('üõí –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    button3 = types.KeyboardButton('üíº –ü—Ä–æ—Ñ–∏–ª—å')
    button4 = types.KeyboardButton('üìÉ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
    ref = types.KeyboardButton('üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
    support_button = types.KeyboardButton('üõ†Ô∏è –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    
    keyboard.add(button1, button3)
    keyboard.add(button2, button4)
    keyboard.add(ref)
    keyboard.add(support_button)
    
    
    inline_button = types.InlineKeyboardButton('üì∑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã', url='https://telegra.ph/SnapNudify-Primery-08-29')
    inline_keyboard = types.InlineKeyboardMarkup().add(inline_button)
    
    start_photo = open('start.jpg', 'rb')
    
    text = "üëã"
    caption = (f"<b>ü§ñ –Ø - –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–¥–µ–≤–∞–µ—Ç —Ñ–æ—Ç–æ –ª—é–±–æ–π –¥–µ–≤—É—à–∫–∏.</b>\n\n"
              f"<b>üì∑ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ñ–æ—Ç–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞ –¥–µ–≤—É—à–∫–∞!</b>\n\n"
              f"üëá –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–æ–∫.\n\n"
    )
    bot.send_message(user_id, text, reply_markup=keyboard)
    bot.send_photo(user_id, photo=start_photo, caption=caption, reply_markup=inline_keyboard, parse_mode='HTML')
    
    save_data()



@bot.message_handler(func=lambda message: message.text == 'üìÉ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
def send_instructions(message):
    user_id = message.from_user.id
    if user_id not in users_processing:
        users_processing[user_id] = {
            'user_name': bot.get_chat(user_id).username,
            'count_processing': 0,
            'free': 0,
            'ref': 0,
            'ref1': 0
        }

    instructions = (f"<b>üóì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
              f"<b>üî∂ –î–µ–≤—É—à–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∞ –ø–µ—Ä–µ–¥–æ–º, —Å—Ç–æ—è—Ç—å –ø—Ä—è–º–æ –≤ –µ—Å—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–∑–µ —Å –ø—Ä—è–º—ã–º —Ä–∞–∫—É—Ä—Å–æ–º. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.</b>\n\n"
              f"<b>üî∂ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—å—Å—è —Å—Ä–µ–¥–Ω–µ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 –º–∏–Ω—É—Ç—ã, –≤—Ä–µ–º—è –æ—Ä–±–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞. –£—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
              f"<b>üî∂ –ï—Å–ª–∏ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–æ—Ç –æ—Ç–º–µ–Ω–∏—Ç –æ–±—Ä–±–∞–æ—Ç–∫—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Ç–æ –ø–∏—à–µ—Ç–µ –≤ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
              f"<b>üî∂ –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Å–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.</b>\n\n\n"
              f"<b>üì® –° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å—é–¥–∞ - @snapnudify_support</b>"
    )
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—ë –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    inline_button = types.InlineKeyboardButton('üõ†Ô∏è –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/snapnudify_support')
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(inline_button)

    bot.send_message(message.chat.id, instructions, parse_mode='HTML', reply_markup=inline_keyboard)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    save_data()

@bot.message_handler(func=lambda message: message.text == 'üõ†Ô∏è –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
def support(message):
    inline_button = types.InlineKeyboardButton('üõ†Ô∏è –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/snapnudify_support')
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.add(inline_button)
    bot.send_message(message.chat.id, f"<b>üì® –° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å—é–¥–∞ - @snapnudify_support</b>", parse_mode='HTML', reply_markup=inline_keyboard)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
@bot.message_handler(func=lambda message: message.text == 'üõí –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏')
def buy_processing(message):
    user_id = message.from_user.id
    if user_id not in users_processing:
        users_processing[user_id] = {
            'user_name': bot.get_chat(user_id).username,
            'count_processing': 0,
            'free': 0,
            'ref': 0,
            'ref1': 0
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
        with open('data.yml', 'a') as file:
            file.write(f'\n- user_id: {user_id}\n user_name: {users_processing[user_id]["user_name"]}\n count_processing: {users_processing[user_id]["count_processing"]}\n free: {users_processing[user_id]["free"]}\n ref: {users_processing[user_id]["ref"]}\n ref1: {users_processing[user_id]["ref1"]}')

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(amounts['button1']['name'], callback_data='tariff_1')
    button2 = types.InlineKeyboardButton(f"{amounts['button1']['price_name']}", callback_data='tariff_1')
    button3 = types.InlineKeyboardButton(amounts['button2']['name'], callback_data='tariff_2')
    button4 = types.InlineKeyboardButton(f"{amounts['button2']['price_name']}", callback_data='tariff_2')
    button5 = types.InlineKeyboardButton(amounts['button3']['name'], callback_data='tariff_3')
    button6 = types.InlineKeyboardButton(f"{amounts['button3']['price_name']}", callback_data='tariff_3')
    button7 = types.InlineKeyboardButton(amounts['button4']['name'], callback_data='tariff_4')
    button8 = types.InlineKeyboardButton(f"{amounts['button4']['price_name']}", callback_data='tariff_4')
    keyboard.add(button1, button2)
    keyboard.add(button3, button4)
    keyboard.add(button5, button6)
    keyboard.add(button7, button8)

    count_processing = users_processing[user_id]['count_processing']
    free_processing = users_processing[user_id]['free']  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
    message_text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: {count_processing}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>"
    bot.send_message(message.chat.id, text=message_text, reply_markup=keyboard, parse_mode='HTML')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    save_data()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üíº –ü—Ä–æ—Ñ–∏–ª—å"
@bot.message_handler(func=lambda message: message.text == 'üíº –ü—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    user_id = message.from_user.id
    if user_id in users_processing:
        inline_button_1 = types.InlineKeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', url='https://telegra.ph/Polzovatelskoe-soglashenie-SnapNudify-08-29')
        inline_button_2 = types.InlineKeyboardButton('–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', url='https://telegra.ph/Politika-konfidencialnosti-dlya-bota-razdip-bot-08-27')
        inline_keyboard = types.InlineKeyboardMarkup()
        inline_keyboard.add(inline_button_1)
        inline_keyboard.add(inline_button_2)
        user_name = users_processing[user_id]['user_name']
        count_processing = users_processing[user_id]['count_processing']
    
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = f"üè† ID: <code>{user_id}</code>\nüëë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: <b>{count_processing}</b>"
        profile_text += f"\n\nüåê –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @snapnudify_support"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, profile_text, parse_mode='HTML', disable_web_page_preview=True, reply_markup=inline_keyboard)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_name = message.from_user.username
        users_processing[user_id] = {
            'user_name': user_name,
            'count_processing': 0,
            'free': 0,
            'ref': 0,
            'ref1': 0
        }

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª data.yml
        save_user_data(users_processing)
        show_profile(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üîû –†–∞–∑–¥–µ—Ç—å –¥–µ–≤—É—à–∫—É"
@bot.message_handler(func=lambda message: message.text == 'üîû –†–∞–∑–¥–µ—Ç—å –¥–µ–≤—É—à–∫—É')
def request_photo(message):
    user_id = message.from_user.id
    if user_id in users_processing:
        user_name = users_processing[user_id]['user_name']
        count_processing = users_processing[user_id]['count_processing']
        free_processing = users_processing[user_id]['free']  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫

        if count_processing > 0 or free_processing > 0:  # –ò–∑–º–µ–Ω–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ
            bot.send_message(message.chat.id, "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:</b>", parse_mode='HTML')
        else:
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton('üõí –ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É', callback_data='buy_processing')
            keyboard.add(button)
            insufficient_message = bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫. –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=keyboard, parse_mode='HTML')

    else:
        user_name = message.from_user.username
        users_processing[user_id] = {
            'user_name': user_name,
            'count_processing': 0,
            'free': 0,
            'ref': 0,
            'ref1': 0
        }

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª data.yml
        save_user_data(users_processing)

        request_photo(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
@bot.callback_query_handler(func=lambda call: call.data == 'buy_processing')
def handle_buy_processing(call):
    user_id = call.from_user.id
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
    if user_id not in users_processing:
        users_processing[user_id] = {
            'user_name': bot.get_chat(user_id).username,
            'count_processing': 0,
            'free': 0,
            'ref': 0,
            'ref1': 0
        }

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫. –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    bot.delete_message(call.message.chat.id, call.message.message_id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton(amounts['button1']['name'], callback_data='tariff_1')
    button2 = types.InlineKeyboardButton(f"{amounts['button1']['price_name']}", callback_data='tariff_1')
    button3 = types.InlineKeyboardButton(amounts['button2']['name'], callback_data='tariff_2')
    button4 = types.InlineKeyboardButton(f"{amounts['button2']['price_name']}", callback_data='tariff_2')
    button5 = types.InlineKeyboardButton(amounts['button3']['name'], callback_data='tariff_3')
    button6 = types.InlineKeyboardButton(f"{amounts['button3']['price_name']}", callback_data='tariff_3')
    button7 = types.InlineKeyboardButton(amounts['button4']['name'], callback_data='tariff_4')
    button8 = types.InlineKeyboardButton(f"{amounts['button4']['price_name']}", callback_data='tariff_4')
    keyboard.add(button1, button2)
    keyboard.add(button3, button4)
    keyboard.add(button5, button6)
    keyboard.add(button7, button8)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∏ –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞
    count_processing = users_processing[user_id]['count_processing']
    message_text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: {count_processing}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>"
    bot.send_message(call.message.chat.id, text=message_text, reply_markup=keyboard, parse_mode='HTML')

def load_data():
    global users_processing
    with open('data.yml', 'r') as file:
        users_processing = yaml.safe_load(file) or {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open('data.yml', 'w') as file:
        yaml.safe_dump(users_processing, file)

@bot.message_handler(commands=['stat'])
def show_stat(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == ADMIN_ID:
        num_users = len(users_processing)
        bot.reply_to(message, f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {num_users}")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send
@bot.message_handler(commands=['send'])
def send_message_with_image(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
        command_args = message.text.split()
        if len(command_args) >= 3:
            user_id = int(command_args[1])
            text = ' '.join(command_args[2:])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(user_id, text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if message.photo:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                photo_id = message.photo[-1].file_id
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_photo(user_id, photo_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if message.document:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∞–π–ª–∞
                file_id = message.document.file_id
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.send_document(user_id, file_id)
        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send <user_id> <—Ç–µ–∫—Å—Ç>")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@bot.message_handler(commands=['info'])
def show_user_info(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == ADMIN_ID:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (user_id)
        command_args = message.text.split()
        if len(command_args) == 2:
            user_id = int(command_args[1])
            if user_id in users_processing:
                count_processing = users_processing[user_id]['count_processing']
                user_name = users_processing[user_id]['user_name']  # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info_text = f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{user_id}</code>\n–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫: <b>{count_processing}</b>"
                bot.send_message(message.chat.id, user_info_text, parse_mode='HTML')
            else:
                bot.send_message(message.chat.id, "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ - /start")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info <user_id>")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def check_payment_status_thread(token, label, user_id, count_processing, payment_message, payment_message_id):
    if check_payment_status(token, label):
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        users_processing[user_id]['count_processing'] += count_processing
        send_payment_success_message(user_id, count_processing)
        bot.delete_message(chat_id=user_id, message_id=payment_message_id)
        print("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–π")
    else:
        bot.send_message(user_id, "–ü–ª–∞—Ç–µ–∂ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.delete_message(chat_id=user_id, message_id=payment_message_id)
        print("–ü–ª–∞—Ç–µ–∂ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π")


@bot.callback_query_handler(func=lambda call: True)
def handle_tariff_selection(call):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–±—ç–∫–∞
    callback_data = call.data.split('_')
    user_id = call.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if callback_data[0] == 'tariff':
        tariff = callback_data[1]  # –ù–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞
        amount = 0  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        count_processing = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
        if tariff == '1':
            amount = amounts['button1']['price']  # –°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            count_processing = 1
        elif tariff == '2':
            amount = amounts['button2']['price']  # –°—É–º–º–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            count_processing = 5
        elif tariff == '3':
            amount = amounts['button3']['price']  # –°—É–º–º–∞ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            count_processing = 10
        elif tariff == '4':
            amount = amounts['button4']['price']  # –°—É–º–º–∞ –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            count_processing = 50

        if amount > 0:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ —Å–µ—Ä–≤–∏—Å–µ –ÆMoney
            label = f"user_{user_id}_{int(time.time())}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
            payment_url = create_payment_link(user_id, amount, label)  # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É

            if payment_url:
                message_text = f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫:</b> {count_processing}\n\n<b>–ö –æ–ø–ª–∞—Ç–µ:</b> {amount} RUB"
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                card_payment_button = types.InlineKeyboardButton('üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π', url=payment_url)
                other_payment_button = types.InlineKeyboardButton('‚ôªÔ∏è –î—Ä—É–≥–æ–µ', callback_data='other_payment')
                keyboard.add(card_payment_button)
                keyboard.add(other_payment_button)
                bot.delete_message(call.message.chat.id, call.message.message_id)
                payment_message = bot.send_message(user_id, message_text, reply_markup=keyboard, parse_mode='HTML')
                payment_message_id = payment_message.message_id


                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                payment_status_thread = threading.Thread(target=check_payment_status_thread, args=(token, label, user_id, count_processing, payment_message, payment_message_id))
                payment_status_thread.start()
            else:
                bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            bot.send_message(user_id, "–í—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä.")
    elif call.data == 'other_payment':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        inline = types.InlineKeyboardMarkup()
        inline_button = types.InlineKeyboardButton('‚ôª –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/snapnudify_support')
        inline.add(inline_button)
        bot.send_message(user_id, "üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–æ–π - @snapnudify_support", reply_markup=inline)
        bot.delete_message(call.message.chat.id, call.message.message_id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
while True:
  try:
    bot.polling(none_stop=True)
  except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
    time.sleep(15) 
